From d62108ab70036d21c6f30804f9b5e77602066f1d Mon Sep 17 00:00:00 2001
From: Tonis Tiigi <tonistiigi@gmail.com>
Date: Thu, 27 Aug 2015 10:08:51 -0700
Subject: [PATCH 3/3] Encode non-fatal floats as integers in canonical mode

Signed-off-by: Tonis Tiigi <tonistiigi@gmail.com>
---
 canonical/json/encode.go      |  8 +++++++-
 canonical/json/encode_test.go | 14 ++++++++++++++
 2 files changed, 21 insertions(+), 1 deletion(-)

diff --git a/canonical/json/encode.go b/canonical/json/encode.go
index e5d7ea0..636a9d7 100644
--- a/canonical/json/encode.go
+++ b/canonical/json/encode.go
@@ -564,21 +564,25 @@ func (bits floatEncoder) encode(e *encodeState, v reflect.Value, opts encOpts) {
 	// Like fmt %g, but the exponent cutoffs are different
 	// and exponents themselves are not padded to two digits.
 	b := e.scratch[:0]
-	abs := math.Abs(f)
-	fmt := byte('f')
-	// Note: Must use float32 comparisons for underlying float32 value to get precise cutoffs right.
-	if abs != 0 {
-		if bits == 64 && (abs < 1e-6 || abs >= 1e21) || bits == 32 && (float32(abs) < 1e-6 || float32(abs) >= 1e21) {
-			fmt = 'e'
+	if e.canonical {
+		b = strconv.AppendInt(b, int64(f), 10)
+	} else {
+		abs := math.Abs(f)
+		fmt := byte('f')
+		// Note: Must use float32 comparisons for underlying float32 value to get precise cutoffs right.
+		if abs != 0 {
+			if bits == 64 && (abs < 1e-6 || abs >= 1e21) || bits == 32 && (float32(abs) < 1e-6 || float32(abs) >= 1e21) {
+				fmt = 'e'
+			}
 		}
-	}
-	b = strconv.AppendFloat(b, f, fmt, -1, int(bits))
-	if fmt == 'e' {
-		// clean up e-09 to e-9
-		n := len(b)
-		if n >= 4 && b[n-4] == 'e' && b[n-3] == '-' && b[n-2] == '0' {
-			b[n-2] = b[n-1]
-			b = b[:n-1]
+		b = strconv.AppendFloat(b, f, fmt, -1, int(bits))
+		if fmt == 'e' {
+			// clean up e-09 to e-9
+			n := len(b)
+			if n >= 4 && b[n-4] == 'e' && b[n-3] == '-' && b[n-2] == '0' {
+				b[n-2] = b[n-1]
+				b = b[:n-1]
+			}
 		}
 	}

diff --git a/canonical/json/encode_test.go b/canonical/json/encode_test.go
index aa8d7fc..ce15882 100644
--- a/canonical/json/encode_test.go
+++ b/canonical/json/encode_test.go
@@ -892,3 +892,17 @@ func TestCanonicalFloatError(t *testing.T) {
 		t.Errorf("want float error, got nil")
 	}
 }
+
+func TestCanonicalFloatAsInt(t *testing.T) {
+	in := struct{ A float64 }{1234567}
+
+	b, err := MarshalCanonical(in)
+	if err != nil {
+		t.Fatalf("Marshal(%q): %v", in, err)
+	}
+	out := string(b)
+	expected := `{"A":1234567}`
+	if out != expected {
+		t.Errorf("Marshal(%q) = %#q, want %#q", in, out, expected)
+	}
+}
--
2.5.0
